################################################################################
#  Alpha‑Factory ― Multi‑Agents AGI stack (API + Trace UI + Observability)     #
#  Compose v2+ file (no explicit `version:` key required)                      #
################################################################################

x-restart: &restart_policy
  restart: unless-stopped

x-healthcheck: &default_healthcheck
  interval: 30s
  timeout: 5s
  retries: 3

services:

  # ──────────────────────────── Core agents API ──────────────────────────── #
  orchestrator:
    <<: *restart_policy
    container_name: orchestrator
    build:
      context: .
      dockerfile: Dockerfile            # multi‑stage (UI pre‑built)
      args:
        # swap at build‑time, e.g. BASE_IMAGE=nvidia/cuda:12.4.0-runtime‑ubuntu22.04
        BASE_IMAGE: ${BASE_IMAGE:-python:3.11-slim-bookworm}

    image: ghcr.io/${DOCKER_USER:-alphafactory}/alpha-factory:dev

    env_file:
      - .env
    # Environment variables (override safely in `.env` or an override file)
    environment:
      OPENAI_API_KEY:       ${OPENAI_API_KEY:-}           # optional
      ALPHA_MARKET_PROVIDER: ${ALPHA_MARKET_PROVIDER:-sim}  # polygon | binance | sim
      ALPHA_BROKER:         ${ALPHA_BROKER:-sim}          # alpaca | ibkr | sim
      A2A_PORT:             "8000"

    ports:
      - "3000:3000"    # Trace‑graph UI  (static bundle)
      - "8000:8000"    # /metrics  +  A2A gRPC

    volumes:
      # Persistent state: FAISS indices, trade ledger, logs, corpora …
      - data:/app/data
      - logs:/tmp/alphafactory

    networks:
      - af-net

    healthcheck:
      <<: *default_healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]

    deploy:
      # GPU stanza is ignored on non‑NVIDIA hosts (safe default)
      resources:
        reservations:
          devices:
            - capabilities: ["gpu"]

  # ────────────────────────────── Prometheus ─────────────────────────────── #
  prometheus:
    <<: *restart_policy
    container_name: prometheus
    image: prom/prometheus:v2.52.0
    volumes:
      - prometheus-data:/prometheus
      - ./docs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - af-net
    depends_on:
      orchestrator:
        condition: service_healthy
    healthcheck:
      <<: *default_healthcheck
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9090/-/ready"]

  # ─────────────────────────────── Grafana ───────────────────────────────── #
  grafana:
    <<: *restart_policy
    container_name: grafana
    image: grafana/grafana:10.4.2
    environment:
      GF_SECURITY_ALLOW_EMBEDDING: "true"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./docs/grafana/:/etc/grafana/provisioning:ro   # ships default dashboard
    ports:
      - "3001:3000"
    networks:
      - af-net
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      <<: *default_healthcheck
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3000/api/health"]

  # ───────────────────────── Optional SPIFFE / SPIRE (commented) ─────────── #
  # Enable by adding a `spire-server` & `spire-agent` section in an override,
  # or via the Helm chart shipped under `helm/alpha-factory-remote`.

# ───────────────────────────────── Volumes / Networks ─────────────────────── #
volumes:
  data:
  logs:
  grafana-storage:
  prometheus-data:

networks:
  af-net:
    driver: bridge
