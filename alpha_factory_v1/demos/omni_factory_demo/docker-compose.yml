###############################################################################
#  SPDX-License-Identifier: Apache-2.0
#  OMNI-Factory  •  Smart-City Resilience Demo
#  docker-compose.yml   —   FINAL • PRODUCTION READY
#
#  One-command deployment of:
#     • omni-factory          – core multi-agent simulator  (port 8050)
#     • postgres-vectorstore  – pgvector DB for knowledge & ledger
#     • redis-broker          – low-latency pub/sub + task queue
#     • caddy                 – HTTPS reverse-proxy  (optional on 443)
#     • prometheus, grafana   – observability stack (optional, ports 9090/3000)
#
#  Quick-start:
#      cp .env.sample .env         # then edit if you wish
#      docker compose up -d
###############################################################################
version: "3.9"

x-restart: &restart_policy
  restart: unless-stopped

x-healthcheck: &default_healthcheck
  interval: 30s
  timeout: 5s
  retries: 3

################################################################################
#                               Network fabric                                 #
################################################################################
networks:
  omni-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.31.0.0/16
  frontend:          # only caddy is attached here
    driver: bridge

################################################################################
#                                 Volumes                                      #
################################################################################
volumes:
  omni-ledger:           # $AGIALPHA ledger & task archive
  pgdata:
  grafana-storage:
  prometheus-storage:

################################################################################
#                                 Services                                     #
################################################################################
services:
# ─────────────────────────────  Core demo  ────────────────────────────────── #
  omni-demo:
    <<: *restart_policy
    build: .
    image: omni-factory:latest
    container_name: omni-demo
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # ── Primary configuration ────────────────────────────────────────────
      OPENAI_API_KEY: ${OPENAI_API_KEY:-""}        # leave blank for offline mode
      OMNI_LEDGER_URL: postgres://omni:${OMNI_DB_PASSWORD}@postgres:5432/omni
      REDIS_URL: redis://redis:6379/0
      # ── Tunables & secrets (override in .env as desired) ─────────────────
      DASH_SERVER_PORT: 8050
      AGIALPHA_SYMBOL: "$AGIALPHA"
    volumes:
      - omni-ledger:/app/ledger
    expose:
      - "8050"
    networks:
      - omni-net
    healthcheck:
      <<: *default_healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8050/_health"]

# ──────────────────────────  Persistence layers  ──────────────────────────── #
  postgres:
    <<: *restart_policy
    image: postgres:15-alpine
    container_name: omni-postgres
    environment:
      POSTGRES_USER: omni
      POSTGRES_PASSWORD: ${OMNI_DB_PASSWORD:-omni_pass}
      POSTGRES_DB: omni
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - omni-net
    healthcheck:
      <<: *default_healthcheck
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]

  redis:
    <<: *restart_policy
    image: redis:7-alpine
    container_name: omni-redis
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    networks:
      - omni-net
    healthcheck:
      <<: *default_healthcheck
      test: ["CMD", "redis-cli", "ping"]

# ─────────────────────────────  HTTPS proxy  ──────────────────────────────── #
  caddy:
    <<: *restart_policy
    image: caddy:2-alpine
    container_name: omni-caddy
    environment:
      # If DOMAIN is not provided, caddy serves HTTP only on :80
      DOMAIN: ${DOMAIN:-localhost}
      EMAIL:  ${LE_EMAIL:-admin@example.com}
    volumes:
      - ./deploy/Caddyfile:/etc/caddy/Caddyfile:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - omni-net
      - frontend
    depends_on:
      omni-demo:
        condition: service_healthy

# ───────────────────────────  Observability (opt-in)  ─────────────────────── #
  prometheus:
    <<: *restart_policy
    image: prom/prometheus:latest
    container_name: omni-prometheus
    volumes:
      - prometheus-storage:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    expose:
      - "9090"
    networks:
      - omni-net
    healthcheck:
      <<: *default_healthcheck
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9090/-/healthy"]

  grafana:
    <<: *restart_policy
    image: grafana/grafana:latest
    container_name: omni-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PW:-admin}
      GF_USERS_DEFAULT_THEME: light
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/grafana-provisioning/:/etc/grafana/provisioning/:ro
    expose:
      - "3000"
    networks:
      - omni-net
    healthcheck:
      <<: *default_healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]

###############################################################################
#                               End of file                                   #
###############################################################################
