# 📦 Alpha‑Factory v1 CI 🌟 — GitHub Actions Workflow
#
# This workflow validates, tests & hardens the α‑ASI world‑model demo.
# ─────────────────────────────────────────────────────────────────────────────
#  ✔ Unit‑tests  ✔ Static‑analysis  ✔ Security‑scan  ✔ Docker build & smoke‑test
#  ✔ Helm lint  ✔ Multi‑Python matrix  ✔ Artifact upload  ✔ Cache optimisation
#
# It is engineered for *antifragility*: failures trigger deeper diagnostics and
# never leak secrets.  Runs fine with *or without* OPENAI_API_KEY.
#
# Docs ➡ https://github.com/MontrealAI/AGI-Alpha-Agent-v0
# ════════════════════════════════════════════════════════════════════════════
name: 🚀 CI / CD — Alpha‑ASI Demo

on:
  push:
    branches: [ main, 'release/**' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read
  actions: read
  checks: write
  id-token: write    # OIDC for registries (optional)

concurrency:
  group: ${{ github.workflow }}‑${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION_MATRIX: '3.10,3.11,3.12'
  DOCKER_IMAGE: alpha-asi-world-model
  HELM_CHART_PATH: alpha_factory_v1/demos/alpha_asi_world_model/helm_chart

jobs:
  ########################
  # 1️⃣  Lint & Typing   #
  ########################
  lint-typecheck:
    name: '🧹 Ruff + 🏷️ Mypy'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [${{ env.PYTHON_VERSION_MATRIX }}]
    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 📦 Install deps (minimal)
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy

      - name: 🧹 Ruff lint
        run: ruff check .

      - name: 🏷️ Mypy type‑check
        run: mypy alpha_factory_v1/demos/alpha_asi_world_model --strict

  ########################
  # 2️⃣  Unit & Smoke    #
  ########################
  test:
    name: '✅ Unit tests'
    needs: lint-typecheck
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [${{ env.PYTHON_VERSION_MATRIX }}]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 📦 Install project deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: 🧪 Run pytest
        run: |
          pytest -q --cov=alpha_factory_v1/demos/alpha_asi_world_model --cov-report=xml                  --cov-report=term-missing

      - name: 📊 Upload coverage (Codecov optional)
        if: ${{ env.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml

      - name: 📥 Upload artefacts
        uses: actions/upload-artifact@v4
        with:
          name: test‑reports‑py${{ matrix.python-version }}
          path: |
            .pytest_cache
            coverage.xml

  ########################
  # 3️⃣  Docker Build    #
  ########################
  docker:
    name: '🐳 Docker build & smoke‑test'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🏗️ Build container
        run: |
          docker build -t $DOCKER_IMAGE:ci .

      - name: 🔍 Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.16.2
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:ci
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: 🚦 Smoke‑test container
        run: |
          docker run -d -p 7860:7860 --name asi_demo $DOCKER_IMAGE:ci --demo --host 0.0.0.0
          sleep 20
          curl -sf http://localhost:7860/agents | jq '. | length'
          docker logs asi_demo --tail 20

  ########################
  # 4️⃣  Helm Lint       #
  ########################
  helm:
    name: '⛵ Helm lint'
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: ⛵ Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: 🔍 Helm lint
        run: helm lint $HELM_CHART_PATH

  #####################################
  # 5️⃣  Release (manual / tag)       #
  #####################################
  release:
    name: '🚀 Publish Docker + Helm'
    if: startsWith(github.ref, 'refs/tags/')
    needs: helm
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Setup Python (for packaging)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 🔑 Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Re‑build image (release)
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/$DOCKER_IMAGE:${{ github.ref_name }} .
          docker push ghcr.io/${{ github.repository_owner }}/$DOCKER_IMAGE:${{ github.ref_name }}

      - name: 📤 Package Helm chart
        run: |
          helm package $HELM_CHART_PATH --destination dist/
          echo "HELM_PKG=$(ls dist/*.tgz)" >> "$GITHUB_ENV"

      - name: 📦 Upload Helm artifact
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.HELM_PKG }}
          generate_release_notes: true
