version: '3.9'

x-healthcheck: &default_healthcheck
  interval: 30s
  timeout: 5s
  retries: 3
services:
  orchestrator:
    build:
      context: ..                        # project root as build context
      dockerfile: infrastructure/Dockerfile # container recipe
    image: alpha-demo:latest             # demo image tag
    env_file:
      - ../.env                          # default environment variables
    environment:
      RUN_MODE: api                           # container start mode
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}     # hosted model credential
      AGI_INSIGHT_SECRET_BACKEND: ${AGI_INSIGHT_SECRET_BACKEND:-}
      VAULT_ADDR: ${VAULT_ADDR:-}
      VAULT_TOKEN: ${VAULT_TOKEN:-}
      AWS_REGION: ${AWS_REGION:-}
      OPENAI_API_KEY_SECRET_ID: ${OPENAI_API_KEY_SECRET_ID:-}
      AGI_INSIGHT_OFFLINE: ${AGI_INSIGHT_OFFLINE:-0} # set 1 for local models
      AGI_INSIGHT_BUS_PORT: ${AGI_INSIGHT_BUS_PORT:-6006} # gRPC event bus port
      AGI_INSIGHT_LEDGER_PATH: ${AGI_INSIGHT_LEDGER_PATH:-./ledger/audit.db} # audit ledger path
    ports:
      - "${PORT:-8000}:8000"                 # host:container REST API port
      - "${AGI_INSIGHT_BUS_PORT:-6006}:6006" # host:container gRPC bus
    restart: unless-stopped              # restart policy
    healthcheck:
      <<: *default_healthcheck
      test: ["CMD", "curl", "-sf", "http://localhost:8000/healthz"]

  evolution_worker:
    build:
      context: ..
      dockerfile: infrastructure/evolution_worker.Dockerfile
    image: evolution-worker:latest
    env_file:
      - ../.env
    environment:
      GPU_TYPE: ${GPU_TYPE:-cpu}
      MAX_GENERATIONS: ${MAX_GENERATIONS:-10}
      STORAGE_PATH: ${STORAGE_PATH:-/tmp/evolution}
    ports:
      - "7865:8000"
    restart: unless-stopped
    healthcheck:
      <<: *default_healthcheck
      test: ["CMD", "curl", "-sf", "http://localhost:8000/healthz"]

  agents:
    image: alpha-demo:latest             # reuse the demo image
    env_file:
      - ../.env                          # default environment variables
    environment:
      RUN_MODE: cli                           # entrypoint for agent workers
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}     # hosted model credential
      AGI_INSIGHT_SECRET_BACKEND: ${AGI_INSIGHT_SECRET_BACKEND:-}
      VAULT_ADDR: ${VAULT_ADDR:-}
      VAULT_TOKEN: ${VAULT_TOKEN:-}
      AWS_REGION: ${AWS_REGION:-}
      OPENAI_API_KEY_SECRET_ID: ${OPENAI_API_KEY_SECRET_ID:-}
      AGI_INSIGHT_OFFLINE: ${AGI_INSIGHT_OFFLINE:-0} # set 1 for local models
      AGI_INSIGHT_BUS_PORT: ${AGI_INSIGHT_BUS_PORT:-6006} # gRPC event bus port
      AGI_INSIGHT_LEDGER_PATH: ${AGI_INSIGHT_LEDGER_PATH:-./ledger/audit.db} # audit ledger path
    mem_limit: 8g
    pids_limit: 512
    network_mode: none
    depends_on:
      - orchestrator                     # wait for orchestrator

  web:
    image: alpha-demo:latest             # reuse the demo image
    env_file:
      - ../.env                          # default environment variables
    environment:
      RUN_MODE: web                           # start the Streamlit dashboard
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}     # hosted model credential
      AGI_INSIGHT_SECRET_BACKEND: ${AGI_INSIGHT_SECRET_BACKEND:-}
      VAULT_ADDR: ${VAULT_ADDR:-}
      VAULT_TOKEN: ${VAULT_TOKEN:-}
      AWS_REGION: ${AWS_REGION:-}
      OPENAI_API_KEY_SECRET_ID: ${OPENAI_API_KEY_SECRET_ID:-}
      AGI_INSIGHT_OFFLINE: ${AGI_INSIGHT_OFFLINE:-0} # set 1 for local models
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-/}
    ports:
      - "8501:8501"                           # host:container dashboard port
    depends_on:
      - orchestrator                     # wait for orchestrator
    healthcheck:
      <<: *default_healthcheck
      test: ["CMD", "curl", "-sf", "http://localhost:8000/healthz"]
